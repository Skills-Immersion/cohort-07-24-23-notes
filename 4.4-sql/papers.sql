DROP TABLE IF EXISTS suppliers, items, orders;
 

CREATE TABLE suppliers (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  supplier_name TEXT NOT NULL,
  phone TEXT,
  city TEXT
);

CREATE TABLE items (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  item_name TEXT NOT NULL,
  unit TEXT,
  unit_cost numeric,
  supplier_id INTEGER REFERENCES suppliers(id) NOT NULL
); 


CREATE TABLE orders (
  id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
  created_at TIMESTAMPTZ DEFAULT now(),
  item_id INTEGER REFERENCES items(id) NOT NULL,
  amount numeric,
  total_cost numeric,
  shipping_status TEXT
);


-- why does this break?
-- because it does not have an item_id
INSERT INTO orders
  (amount, total_cost, shipping_status)
VALUES
  (20, 20, 'Shipped');
 
INSERT INTO orders
  (amount, total_cost, shipping_status, item_id)
VALUES
  (20, 20, 'Shipped', 75);
	
-- first remove any data that may be present
TRUNCATE  suppliers, items, orders RESTART IDENTITY CASCADE;
 
-- insert some suppliers
INSERT INTO suppliers
  (supplier_name, phone, city)
  VALUES 
    ('Arnold Grummers Papermaking', '920-840-6056', 'Appleton'),
    ('Glatfelter', '49 (0) 3 39 86 / 69-0', 'Falkenhagen'),
    ('Blumfeld Paper', '555-6789', 'Moscow');
 
-- insert some items
INSERT INTO items
  (item_name, unit, unit_cost, supplier_id)
  VALUES
    ('Paper Additives', 'LBS', '3.85', 1),
    ('G-Colors Envelope Papers', 'LBS', '0.62', 2),    
    ('Abaca Sheet Pulp', 'LBS', '11.20', 1),    
    ('Unbleached Abaca', 'LBS', '1499.00', 1),    
    ('Wood pulp', 'LBS', '0.20', 3),
    ('White Envelope Papers', 'LBS', '0.52', 2);
 
-- insert some orders
INSERT INTO orders 
  (item_id, amount, total_cost, shipping_status)
  VALUES
    (1, 10, 38.5, 'Delivered'),
    (2, 2000, 1240, 'Shipped'),
    (3, 50, 560, 'Shipped'),
    (4, 1, 1499, 'Shipped'),
    (5, 2000, 400, 'Preparing'),
    (2, 1000, 620, 'Preparing');    

DELETE FROM orders WHERE item_id = 1;
DELETE FROM items WHERE id = 1;

SELECT * FROM items 
	JOIN suppliers ON items.supplier_id = suppliers.id;

-- join across multiple tables
SELECT * FROM orders 
	JOIN items ON orders.item_id = items.id
	JOIN suppliers ON items.supplier_id = suppliers.id;

SELECT item_name, supplier_name FROM orders 
	JOIN items ON orders.item_id = items.id
	JOIN suppliers ON items.supplier_id = suppliers.id
	WHERE total_cost > 1000;

SELECT item_name AS product, amount AS quantity FROM orders 
	JOIN items ON orders.item_id = items.id
	WHERE total_cost < 600;


-------- many to many time!

-- remove the foreign key from the items table
ALTER TABLE items DROP COLUMN supplier_id;

-- create the intermediate table
CREATE TABLE suppliers_items(
	supplier_id INTEGER REFERENCES suppliers(id) NOT NULL,
	item_id INTEGER REFERENCES items(id) NOT NULL,
	PRIMARY KEY(supplier_id, item_id)
);

INSERT INTO suppliers_items(item_id, supplier_id) 
	VALUES
	(2,2),
	(3,1),
	(5,3),
	(5,1),
	(3,2);

SELECT * FROM suppliers
	JOIN suppliers_items ON suppliers.id = suppliers_items.supplier_id
	JOIN items ON suppliers_items.item_id = items.id;
