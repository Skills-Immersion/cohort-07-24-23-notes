Our memory! each slot holds 8 bits

+---+---+---+---+---+---+---+---+---+---+           Dynamic vs Static 
| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |10 |           Amortized Analysis (maths to explain O(1) dynamic array push)
|   |   |   |   |   |   |   |   |   |   |
+---+---+---+---+---+---+---+---+---+---+
|11 |12 |13 |14 |15 |16 |17 |18 |19 |20 |
|   |   |   |   |   |   |   |   |   |   |
+---+---+---+---+---+---+---+---+---+---+
|21 |22 |23 |24 |25 |26 |27 |28 |29 |30 |           [1,5,3] each integer being 32bit int   
|   |   |   |   |   |   |   |   |   |   |
+---+---+---+---+---+---+---+---+---+---+
|31 |32 |33 |34 |35 |36 |37 |38 |39 |40 |
|   |   |   |   |   |   |   |   |   |   |
+---+---+---+---+---+---+---+---+---+---+
|41 |42 |43 |44 |45 |46 |47 |48 |49 |50 |
|   |   |   |   |   |   |   |   |   |   |
+---+---+---+---+---+---+---+---+---+---+

init -> O(N)ST              traverse -> O(N)T O(1)S
get -> O(1)ST               copy -> O(N)ST
set -> O(1)ST               insert -> O(N)T O(1)S  *O(1) Dynamic

*/

//The Set object lets you store unique values of any type, whether primitive values or object references.

const mySet1 = new Set();
mySet1.add(1)           // Set(1) { 1 }
mySet1.add(5)           // Set(2) { 1, 5 }
mySet1.add(5)           // Set(2) { 1, 5 }
mySet1.add('some text') // Set(3) { 1, 5, 'some text' }
const o = { a: 1, b: 2 }
mySet1.add(o)

mySet1.add({ a: 1, b: 2 })   // o is referencing a different object, so this is okay
console.log(mySet1);
mySet1.has(1)              // true
mySet1.has(3)              // false, since 3 has not been added to the set
mySet1.has(5)              // true
mySet1.has(Math.sqrt(25))  // true
mySet1.has('Some Text'.toLowerCase()) // true
mySet1.has(o)       // true

mySet1.size         // 5

mySet1.delete(5)    // removes 5 from the set
mySet1.has(5)       // false, 5 has been removed

mySet1.size         // 4, since we just removed one value

mySet1.add(5)       // Set(5) { 1, 'some text', {...}, {...}, 5 } - a previously deleted item will be added as a new item, it will not retain its original position before deletion

console.log(mySet1) // Set(5) { 1, "some text", {…}, {…}, 5 }


/*
add => O(1)             delete => O(1)
traverse => O(N)        has => O(1) 
*/

*JS objects are quirky we are talking about Hash Table*
//Maps are a very effecient data structure

let myMap = new Map();

myMap.set("Person one", {age: 50, hobby: "yelling at young people"});
myMap.set("Person two", {age: 20, hobby: "yelling at old people"});

console.log(myMap.get("Person one"));
console.log(myMap.delete("Person one"));
console.log(myMap);

let nums = [ [0,"zero"], [1,"one"], [2,"two"] ];

let numMap = new Map(nums);


/*
set => O(1)             delete => O(1)
traverse => O(N)        has => O(1)     get => O(1) *could be O(N)
*/

A hash table is a data structure that is used to implement an associative array, a structure that can map keys to values

                                   +-------------+
                                   |  Buckets    |
                                   +-------------+
                                   | [0   1   2] |
                                   +-------------+
                                   |             |
                                   +-------------+
                                 +-+-------------+-+
                                 | |  Bucket 0    | |
                                 +-+-------------+-+
                                 | | Key: "foo"   | |
                                 | | Value: 1     | |
                                 +-+-------------+-+
The hash table is the main data structure. It contains an array of buckets.

Each bucket is a slot that can store a key-value pair.

When you add a key-value pair to the hash table, the key is passed through a hash function which produces an index.

The index is then used to determine which bucket the key-value pair should be added to.

When you want to retrieve a value from the hash table, you pass the key through the same hash function to get the index.

The index is then used to determine which bucket the key-value pair is in.

Once the bucket is located, the value associated with the key is returned.

The hash function should be designed such a way that it will distribute the keys uniformly across the different buckets, this is called load balancing.

In case of collision, when two keys have the same index, the hash table will use a collision resolution strategy like Open addressing or chaining.

Chaining is what we talked about with creating a linked list (We will go over them next week)

Open addressing: In open addressing, when a collision occurs, the hash table looks for the next available slot (or "open address") in the array to store the key-value pair. This is done by using a probe sequence, such as linear probing or quadratic probing
